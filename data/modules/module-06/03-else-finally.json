{
    "tasks": [
        {
            "answer": "–∫–æ–≥–¥–∞ –æ—à–∏–±–∫–∏ –Ω–µ –±—ã–ª–æ",
            "hint": "else –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –µ—Å–ª–∏ try –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π.",
            "id": "m6t9",
            "question": "–ö–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è else –≤ try/except?"
        },
        {
            "answer": "–≤—Å–µ–≥–¥–∞",
            "hint": "finally –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞ ‚Äî —Å –æ—à–∏–±–∫–æ–π –∏–ª–∏ –±–µ–∑.",
            "id": "m6t10",
            "question": "–ö–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è finally?"
        },
        {
            "answer": "try, except –∏–ª–∏ else, finally",
            "hint": "try ‚Üí except (–ø—Ä–∏ –æ—à–∏–±–∫–µ) –∏–ª–∏ else (–±–µ–∑ –æ—à–∏–±–∫–∏) ‚Üí finally.",
            "id": "m6t11",
            "question": "–í –∫–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –±–ª–æ–∫–∏ try/except/else/finally?"
        },
        {
            "answer": "–æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤",
            "hint": "finally –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–æ–≤, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏ —Ç.–¥.",
            "id": "m6t12",
            "question": "–î–ª—è —á–µ–≥–æ –æ–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è finally?"
        }
    ],
    "theory": "**else –∏ finally** ‚Äî —ç—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª–∞—é—Ç –∫–æ–¥ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–º –∏ —á–∏—Ç–∞–µ–º—ã–º. –û–Ω–∏ –ø–æ–º–æ–≥–∞—é—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π!\nüîß **–ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ try/except/else/finally**:\n```python\ntry:\n    # –ö–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É\n    risky_operation()\nexcept –¢–∏–ø–û—à–∏–±–∫–∏:\n    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏\n    handle_error()\nelse:\n    # –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—à–∏–±–∫–∏ –ù–ï –±—ã–ª–æ\n    success_operation()\nfinally:\n    # –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–°–ï–ì–î–ê\n    cleanup_resources()\n```\n\n‚úÖ **–ë–ª–æ–∫ else ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —É—Å–ø–µ—Ö–µ**:\n\n**–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä**:\n```python\ndef divide_numbers(a, b):\n    try:\n        result = a / b\n    except ZeroDivisionError:\n        print(\"–û—à–∏–±–∫–∞: –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å\")\n        return None\n    else:\n        print(f\"–î–µ–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: {a} / {b} = {result}\")\n        return result\n    finally:\n        print(\"–û–ø–µ—Ä–∞—Ü–∏—è –¥–µ–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\")\n\n# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\nprint(divide_numbers(10, 2))  # –£—Å–ø–µ—Ö: else –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è\nprint(divide_numbers(10, 0))  # –û—à–∏–±–∫–∞: else –ù–ï –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è\n```\n\n**–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å else**:\n```python\ndef process_file(filename):\n    file_handle = None\n    try:\n        file_handle = open(filename, 'r', encoding='utf-8')\n        content = file_handle.read()\n        \n        if not content.strip():\n            print(\"–§–∞–π–ª –ø—É—Å—Ç–æ–π\")\n            return None\n            \n    except FileNotFoundError:\n        print(f\"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω\")\n        return None\n    except PermissionError:\n        print(f\"–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É {filename}\")\n        return None\n    else:\n        # –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω\n        print(f\"–§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω\")\n        print(f\"–†–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤\")\n        return content\n    finally:\n        # –í—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª\n        if file_handle:\n            file_handle.close()\n            print(\"–§–∞–π–ª –∑–∞–∫—Ä—ã—Ç\")\n\n# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\ncontent = process_file('data.txt')\nif content:\n    print(f\"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {content[:50]}...\")\n```\n\nüîÑ **–ë–ª–æ–∫ finally ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞**:\n\n**–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤**:\n```python\ndef database_operation():\n    connection = None\n    try:\n        # –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î\n        connection = \"database_connection\"\n        print(\"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\")\n        \n        # –°–∏–º—É–ª—è—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏\n        result = \"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\"\n        print(result)\n        return result\n        \n    except Exception as e:\n        print(f\"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î: {e}\")\n        return None\n    finally:\n        # –í—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n        if connection:\n            print(\"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ\")\n            connection = None\n\n# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\nresult = database_operation()\n```\n\n**–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å finally**:\n```python\nimport time\nfrom datetime import datetime\n\ndef timed_operation(operation_name):\n    start_time = time.time()\n    try:\n        print(f\"–ù–∞—á–∏–Ω–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é: {operation_name}\")\n        \n        # –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã\n        time.sleep(0.1)  # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏\n        \n        if operation_name == \"error_operation\":\n            raise ValueError(\"–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞\")\n            \n        print(f\"–û–ø–µ—Ä–∞—Ü–∏—è {operation_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ\")\n        return True\n        \n    except Exception as e:\n        print(f\"–û—à–∏–±–∫–∞ –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏ {operation_name}: {e}\")\n        return False\n    finally:\n        # –í—Å–µ–≥–¥–∞ –ª–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n        end_time = time.time()\n        duration = end_time - start_time\n        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n        print(f\"[{timestamp}] –û–ø–µ—Ä–∞—Ü–∏—è '{operation_name}' –∑–∞–Ω—è–ª–∞ {duration:.3f} —Å–µ–∫—É–Ω–¥\")\n\n# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\ntimed_operation(\"successful_operation\")\ntimed_operation(\"error_operation\")\n```\n\nüí° **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã**:\n\n**–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏**:\n```python\ndef backup_file(source_file, backup_dir='backups'):\n    import os\n    import shutil\n    from datetime import datetime\n    \n    source_handle = None\n    backup_handle = None\n    \n    try:\n        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª\n        source_handle = open(source_file, 'r', encoding='utf-8')\n        content = source_handle.read()\n        \n        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏\n        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')\n        backup_filename = f\"{os.path.basename(source_file)}.backup_{timestamp}\"\n        backup_path = os.path.join(backup_dir, backup_filename)\n        \n        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤\n        os.makedirs(backup_dir, exist_ok=True)\n        \n        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é\n        backup_handle = open(backup_path, 'w', encoding='utf-8')\n        backup_handle.write(content)\n        backup_handle.flush()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞ –¥–∏—Å–∫\n        \n    except FileNotFoundError:\n        print(f\"–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª {source_file} –Ω–µ –Ω–∞–π–¥–µ–Ω\")\n        return False\n    except PermissionError:\n        print(f\"–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É {source_file}\")\n        return False\n    except Exception as e:\n        print(f\"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}\")\n        return False\n    else:\n        # –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞\n        print(f\"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}\")\n        print(f\"–†–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤\")\n        return True\n    finally:\n        # –í—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã\n        if source_handle:\n            source_handle.close()\n        if backup_handle:\n            backup_handle.close()\n        print(\"–§–∞–π–ª–æ–≤—ã–µ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã –∑–∞–∫—Ä—ã—Ç—ã\")\n\n# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\nbackup_file('important_data.txt')\n```\n\n**–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π**:\n```python\ndef fetch_data_with_retry(url, max_retries=3):\n    import urllib.request\n    import time\n    \n    connection = None\n    retry_count = 0\n    \n    while retry_count < max_retries:\n        try:\n            print(f\"–ü–æ–ø—ã—Ç–∫–∞ {retry_count + 1} –∏–∑ {max_retries}\")\n            \n            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n            connection = urllib.request.urlopen(url, timeout=5)\n            data = connection.read().decode('utf-8')\n            \n        except urllib.error.URLError as e:\n            print(f\"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}\")\n            retry_count += 1\n            if retry_count < max_retries:\n                print(f\"–ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...\")\n                time.sleep(2)\n            continue\n        except Exception as e:\n            print(f\"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}\")\n            return None\n        else:\n            # –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö\n            print(f\"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã ({len(data)} –±–∞–π—Ç)\")\n            return data\n        finally:\n            # –í—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n            if connection:\n                connection.close()\n                print(\"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ\")\n    \n    print(f\"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫\")\n    return None\n\n# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\ndata = fetch_data_with_retry('https://httpbin.org/json')\nif data:\n    print(f\"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data[:100]}...\")\n```\n\n**–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å finally**:\n```python\nclass DatabaseConnection:\n    def __init__(self, db_name):\n        self.db_name = db_name\n        self.connection = None\n    \n    def __enter__(self):\n        print(f\"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö {self.db_name}\")\n        self.connection = f\"connection_to_{self.db_name}\"\n        return self\n    \n    def __exit__(self, exc_type, exc_val, exc_tb):\n        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∫ finally\n        if self.connection:\n            print(f\"–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å {self.db_name}\")\n            self.connection = None\n        \n        if exc_type:\n            print(f\"–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {exc_type.__name__}: {exc_val}\")\n        else:\n            print(\"–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ\")\n        \n        return False  # –ù–µ –ø–æ–¥–∞–≤–ª—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è\n    \n    def execute_query(self, query):\n        if not self.connection:\n            raise RuntimeError(\"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\")\n        print(f\"–í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å: {query}\")\n        return f\"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞: {query}\"\n\n# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ\nwith DatabaseConnection('myapp') as db:\n    result = db.execute_query('SELECT * FROM users')\n    print(result)\n    # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä–æ–µ—Ç—Å—è –≤ __exit__\n```\n\n**–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π**:\n```python\ndef process_transaction(operations):\n    \"\"\"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –æ—Ç–∫–∞—Ç–æ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ\"\"\"\n    transaction_log = []\n    \n    try:\n        for i, operation in enumerate(operations):\n            print(f\"–í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é {i+1}: {operation}\")\n            \n            # –°–∏–º—É–ª—è—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏\n            if operation == \"error_operation\":\n                raise ValueError(\"–û—à–∏–±–∫–∞ –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏\")\n            \n            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n            transaction_log.append(f\"–û–ø–µ—Ä–∞—Ü–∏—è {i+1} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ\")\n            \n    except Exception as e:\n        print(f\"–û—à–∏–±–∫–∞ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}\")\n        print(\"–û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è...\")\n        \n        # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏\n        for log_entry in reversed(transaction_log):\n            print(f\"–û—Ç–∫–∞—Ç: {log_entry}\")\n        \n        return False\n    else:\n        # –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ\n        print(\"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ\")\n        print(f\"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {len(transaction_log)}\")\n        return True\n    finally:\n        # –û—á–∏—â–∞–µ–º –ª–æ–≥–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n        transaction_log.clear()\n        print(\"–õ–æ–≥–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã\")\n\n# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\noperations = [\"operation1\", \"operation2\", \"operation3\"]\nprocess_transaction(operations)\n\noperations_with_error = [\"operation1\", \"error_operation\", \"operation3\"]\nprocess_transaction(operations_with_error)\n```\n\n‚ö†Ô∏è **–í–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã**:\n- **else –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π**\n- **finally –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞** ‚Äî –¥–∞–∂–µ –ø—Ä–∏ return, break, continue\n- **finally –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ** ‚Äî —Ç–æ–ª—å–∫–æ –æ—á–∏—Å—Ç–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã\n- **–ü–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è**: try ‚Üí except/else ‚Üí finally\n- **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ finally –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤**\n- **else –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ**\n- **–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ return –≤ finally** ‚Äî —ç—Ç–æ –º–æ–∂–µ—Ç —Å–∫—Ä—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è",
    "title": "else/finally –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–æ–∫"
}