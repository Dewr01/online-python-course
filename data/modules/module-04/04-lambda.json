{
    "tasks": [
        {
            "answer": "lambda x: x*2",
            "hint": "lambda –ø–∞—Ä–∞–º–µ—Ç—Ä: –≤—ã—Ä–∞–∂–µ–Ω–∏–µ",
            "id": "m4t13",
            "question": "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –ª—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü–∏—é, –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é x*2?"
        },
        {
            "answer": "6",
            "hint": "–õ—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç 5 –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 5+1=6.",
            "id": "m4t14",
            "question": "–ß—Ç–æ –ø–æ–ª—É—á–∏—Ç—Å—è –ø—Ä–∏ (lambda x: x+1)(5)?"
        },
        {
            "answer": "–Ω–µ—Ç",
            "hint": "–õ—è–º–±–¥–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ.",
            "id": "m4t15",
            "question": "–ú–æ–∂–Ω–æ –ª–∏ –≤ –ª—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–π? (–¥–∞/–Ω–µ—Ç)"
        },
        {
            "answer": "lambda x, y: x+y",
            "hint": "–ù–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è –∑–∞–ø—è—Ç–æ–π.",
            "id": "m4t16",
            "question": "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –ª—è–º–±–¥–∞ —Å –¥–≤—É–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏?"
        }
    ],
    "theory": "**–õ—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü–∏–∏** ‚Äî —ç—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω—ã–µ (–±–µ–∑—ã–º—è–Ω–Ω—ã–µ) —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É. –û–Ω–∏ –∏–¥–µ–∞–ª—å–Ω—ã –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∏ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞!\nüîß **–°–∏–Ω—Ç–∞–∫—Å–∏—Å –ª—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü–∏–π**:\n```python\nlambda –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –≤—ã—Ä–∞–∂–µ–Ω–∏–µ\n```\n\n**–ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∏–º–µ—Ä—ã**:\n```python\n# –û–±—ã—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è\ndef square(x):\n    return x * x\n\n# –õ—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü–∏—è (—Ç–æ –∂–µ —Å–∞–º–æ–µ)\nsquare_lambda = lambda x: x * x\n\nprint(square(5))        # 25\nprint(square_lambda(5)) # 25\n```\n\n**–õ—è–º–±–¥–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏**:\n```python\n# –°–ª–æ–∂–µ–Ω–∏–µ\ndef add(a, b):\n    return a + b\n\nadd_lambda = lambda a, b: a + b\nprint(add_lambda(3, 7))  # 10\n\n# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ\ngreater = lambda x, y: x > y\nprint(greater(10, 5))    # True\n```\n\nüåü **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞**:\n\n**map() ‚Äî –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É**:\n```python\nnumbers = [1, 2, 3, 4, 5]\n\n# –û–±—ã—á–Ω—ã–π —Å–ø–æ—Å–æ–±\ndef square(x):\n    return x * x\nsquared = list(map(square, numbers))\n\n# –° –ª—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü–∏–µ–π\nsquared_lambda = list(map(lambda x: x * x, numbers))\nprint(squared_lambda)  # [1, 4, 9, 16, 25]\n```\n\n**filter() ‚Äî —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤**:\n```python\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# –ß–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞\n# –û–±—ã—á–Ω—ã–π —Å–ø–æ—Å–æ–±\ndef is_even(x):\n    return x % 2 == 0\neven_numbers = list(filter(is_even, numbers))\n\n# –° –ª—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü–∏–µ–π\neven_lambda = list(filter(lambda x: x % 2 == 0, numbers))\nprint(even_lambda)  # [2, 4, 6, 8, 10]\n```\n\n**sorted() ‚Äî —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å –∫–ª—é—á–æ–º**:\n```python\nstudents = [\n    {\"name\": \"–ê–Ω–Ω–∞\", \"grade\": 85},\n    {\"name\": \"–ë–æ—Ä–∏—Å\", \"grade\": 92},\n    {\"name\": \"–í–∏–∫—Ç–æ—Ä\", \"grade\": 78}\n]\n\n# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –æ—Ü–µ–Ω–∫–µ\n# –û–±—ã—á–Ω—ã–π —Å–ø–æ—Å–æ–±\ndef get_grade(student):\n    return student[\"grade\"]\nsorted_by_grade = sorted(students, key=get_grade)\n\n# –° –ª—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü–∏–µ–π\nsorted_lambda = sorted(students, key=lambda student: student[\"grade\"])\nprint([s[\"name\"] for s in sorted_lambda])  # ['–í–∏–∫—Ç–æ—Ä', '–ê–Ω–Ω–∞', '–ë–æ—Ä–∏—Å']\n```\n\nüí° **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã**:\n\n**–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫**:\n```python\nnames = [\"–∞–Ω–Ω–∞\", \"–ë–û–†–ò–°\", \"–≤–∏–∫—Ç–æ—Ä\"]\n\n# –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –∑–∞–≥–ª–∞–≤–Ω—ã–º –±—É–∫–≤–∞–º\ncapitalized = list(map(lambda name: name.title(), names))\nprint(capitalized)  # ['–ê–Ωna', '–ë–æ—Ä–∏—Å', '–í–∏–∫—Ç–æ—Ä']\n\n# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –∏–º–µ–Ω\nlong_names = list(filter(lambda name: len(name) > 4, names))\nprint(long_names)  # ['–ë–û–†–ò–°', '–≤–∏–∫—Ç–æ—Ä']\n```\n\n**–†–∞–±–æ—Ç–∞ —Å —á–∏—Å–ª–∞–º–∏**:\n```python\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# –ß–∏—Å–ª–∞ –±–æ–ª—å—à–µ 5\nbig_numbers = list(filter(lambda x: x > 5, numbers))\nprint(big_numbers)  # [6, 7, 8, 9, 10]\n\n# –ö–≤–∞–¥—Ä–∞—Ç—ã —á–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª\nsquares_of_evens = list(map(lambda x: x * x, filter(lambda x: x % 2 == 0, numbers)))\nprint(squares_of_evens)  # [4, 16, 36, 64, 100]\n```\n\n**–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–æ–∂–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä**:\n```python\nproducts = [\n    {\"name\": \"–ù–æ—É—Ç–±—É–∫\", \"price\": 50000},\n    {\"name\": \"–ú—ã—à—å\", \"price\": 1000},\n    {\"name\": \"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞\", \"price\": 3000}\n]\n\n# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–Ω–µ (–æ—Ç –¥–µ—à–µ–≤—ã—Ö –∫ –¥–æ—Ä–æ–≥–∏–º)\ncheap_first = sorted(products, key=lambda p: p[\"price\"])\nprint([p[\"name\"] for p in cheap_first])  # ['–ú—ã—à—å', '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞', '–ù–æ—É—Ç–±—É–∫']\n\n# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–ª–∏–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏—è\nby_name_length = sorted(products, key=lambda p: len(p[\"name\"]))\nprint([p[\"name\"] for p in by_name_length])  # ['–ú—ã—à—å', '–ù–æ—É—Ç–±—É–∫', '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞']\n```\n\n**–°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤**:\n```python\n# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —É–º–Ω–æ–∂–µ–Ω–∏—è\ndef create_multiplier(n):\n    return lambda x: x * n\n\n# –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–º–Ω–æ–∂–µ–Ω–∏—è –Ω–∞ 2, 3, 5\ntimes_two = create_multiplier(2)\ntimes_three = create_multiplier(3)\ntimes_five = create_multiplier(5)\n\nprint(times_two(10))    # 20\nprint(times_three(10))  # 30\nprint(times_five(10))   # 50\n```\n\n‚ö†Ô∏è **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ª—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü–∏–π**:\n- **–¢–æ–ª—å–∫–æ –æ–¥–Ω–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ** ‚Äî –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `if`, `for`, `while`\n- **–ù–µ—Ç return** ‚Äî –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è\n- **–ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏** ‚Äî —Å–ª–æ–∂–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å\n- **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è —á–∏—Ç–∞–µ–º–æ—Å—Ç—å** ‚Äî —Å–ª–æ–∂–Ω—ã–µ –ª—è–º–±–¥—ã —Ç—Ä—É–¥–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å\n\n**–ö–æ–≥–¥–∞ –ù–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—è–º–±–¥–∞**:\n```python\n# –°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–æ - –ª—É—á—à–µ –æ–±—ã—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è\ndef complex_operation(x, y, z):\n    if x > 0:\n        return (x * y) + z\n    else:\n        return (x * z) - y\n\n# –í–º–µ—Å—Ç–æ:\n# complex_lambda = lambda x, y, z: (x * y) + z if x > 0 else (x * z) - y\n```\n\nüéØ **–ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—è–º–±–¥–∞**:\n- –ü—Ä–æ—Å—Ç—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞)\n- –§—É–Ω–∫—Ü–∏–∏ –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞ (map, filter, sorted)\n- –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n- –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "title": "–õ—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü–∏–∏"
}