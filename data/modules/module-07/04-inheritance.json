{
    "title": "Наследование",
    "theory": "**Наследование** — один из ключевых принципов ООП, позволяющий создавать новые классы на основе существующих.\n**Основная идея:**\n- Дочерний класс наследует все атрибуты и методы родительского класса\n- Можно добавлять новые атрибуты и методы\n- Можно переопределять (изменять) унаследованные методы\n\n**Синтаксис:**\n```python\nclass Animal:\n    def __init__(self, name):\n        self.name = name\n    \n    def make_sound(self):\n        return \"Звук животного\"\n\nclass Dog(Animal):  # Dog наследует от Animal\n    def __init__(self, name, breed):\n        super().__init__(name)  # вызов конструктора родителя\n        self.breed = breed\n    \n    def make_sound(self):  # переопределение метода\n        return \"Гав-гав!\"\n    \n    def fetch(self):  # новый метод\n        return f\"{self.name} принес мяч\"\n```\n\n**Ключевые концепции:**\n- `super()` — обращение к родительскому классу\n- Переопределение методов — полиморфизм\n- Множественное наследование: `class Child(Parent1, Parent2)`\n\n**Пример использования:**\n```python\ndog = Dog(\"Бобик\", \"лабрадор\")\nprint(dog.name)  # Бобик (унаследовано)\nprint(dog.make_sound())  # Гав-гав! (переопределено)\nprint(dog.fetch())  # Бобик принес мяч (новый метод)\n```\n\n**Преимущества:**\n- Переиспользование кода\n- Создание иерархии классов\n- Расширяемость и гибкость",
    "tasks": [
        {
            "id": "m7t13",
            "question": "Как создать класс Child, наследующий от Parent?",
            "answer": "class Child(Parent): pass",
            "hint": "class Дочерний(Родительский):"
        },
        {
            "id": "m7t14",
            "question": "Что наследует дочерний класс от родительского?",
            "answer": "атрибуты и методы",
            "hint": "Все атрибуты и методы родительского класса."
        },
        {
            "id": "m7t15",
            "question": "Как обратиться к методу родительского класса?",
            "answer": "super()",
            "hint": "super().метод_родителя()"
        },
        {
            "id": "m7t16",
            "question": "Может ли дочерний класс переопределить метод родителя? (да/нет)",
            "answer": "да",
            "hint": "Переопределение методов — полиморфизм."
        }
    ]
}
