{
    "title": "–°–±–æ—Ä–∫–∞ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
    "theory": "**–ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç: –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ Pyodide** ‚Äî –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∏–∑—É—á–µ–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ Python.\n## –¶–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞\n\n–°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –æ–±—ä–µ–¥–∏–Ω—è—é—â–µ–µ:\n- –í—Å–µ –∏–∑—É—á–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ Python\n- –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏\n- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n- –û–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö\n- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é\n\n## –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞\n\n**–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤:**\n```\nfinal_project/\n‚îú‚îÄ‚îÄ index.html              # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞\n‚îú‚îÄ‚îÄ main.py                 # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞\n‚îú‚îÄ‚îÄ app/\n‚îÇ   ‚îú‚îÄ‚îÄ models.py           # –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö\n‚îÇ   ‚îú‚îÄ‚îÄ services.py         # –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞\n‚îÇ   ‚îî‚îÄ‚îÄ utils.py            # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n‚îú‚îÄ‚îÄ tests/\n‚îÇ   ‚îú‚îÄ‚îÄ test_models.py\n‚îÇ   ‚îî‚îÄ‚îÄ test_services.py\n‚îú‚îÄ‚îÄ static/\n‚îÇ   ‚îú‚îÄ‚îÄ style.css\n‚îÇ   ‚îî‚îÄ‚îÄ script.js\n‚îî‚îÄ‚îÄ README.md\n```\n\n## –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n\n**–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å (main.py):**\n```python\nimport json\nfrom datetime import datetime\nfrom typing import List, Dict, Optional\n\nclass TaskManager:\n    \"\"\"–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º\"\"\"\n    \n    def __init__(self):\n        self.tasks: List[Dict] = []\n        self.categories = [\"–†–∞–±–æ—Ç–∞\", \"–õ–∏—á–Ω–æ–µ\", \"–£—á–µ–±–∞\", \"–ó–¥–æ—Ä–æ–≤—å–µ\"]\n        self.load_data()\n    \n    def add_task(self, title: str, description: str = \"\", \n                 category: str = \"–õ–∏—á–Ω–æ–µ\", priority: int = 1) -> Dict:\n        \"\"\"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏\"\"\"\n        if not title.strip():\n            raise ValueError(\"–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º\")\n        \n        if priority not in range(1, 6):\n            raise ValueError(\"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5\")\n        \n        task = {\n            \"id\": self._generate_id(),\n            \"title\": title.strip(),\n            \"description\": description.strip(),\n            \"category\": category,\n            \"priority\": priority,\n            \"completed\": False,\n            \"created_at\": datetime.now().isoformat(),\n            \"completed_at\": None\n        }\n        \n        self.tasks.append(task)\n        self.save_data()\n        return task\n    \n    def get_tasks(self, category: Optional[str] = None, \n                  completed: Optional[bool] = None) -> List[Dict]:\n        \"\"\"–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π\"\"\"\n        filtered_tasks = self.tasks\n        \n        if category is not None:\n            filtered_tasks = [t for t in filtered_tasks if t[\"category\"] == category]\n        \n        if completed is not None:\n            filtered_tasks = [t for t in filtered_tasks if t[\"completed\"] == completed]\n        \n        return sorted(filtered_tasks, key=lambda x: (-x[\"priority\"], x[\"created_at\"]))\n    \n    def complete_task(self, task_id: str) -> bool:\n        \"\"\"–û—Ç–º–µ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π\"\"\"\n        for task in self.tasks:\n            if task[\"id\"] == task_id and not task[\"completed\"]:\n                task[\"completed\"] = True\n                task[\"completed_at\"] = datetime.now().isoformat()\n                self.save_data()\n                return True\n        return False\n    \n    def get_statistics(self) -> Dict:\n        \"\"\"–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\"\"\"\n        total = len(self.tasks)\n        completed = sum(1 for task in self.tasks if task[\"completed\"])\n        \n        return {\n            \"total_tasks\": total,\n            \"completed_tasks\": completed,\n            \"completion_rate\": (completed / total * 100) if total > 0 else 0\n        }\n```\n\n## –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n\n**HTML —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:**\n```html\n<!DOCTYPE html>\n<html lang=\"ru\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Task Manager - Python Pyodide</title>\n    <script src=\"https://cdn.jsdelivr.net/pyodide/v0.24.1/full/pyodide.js\"></script>\n</head>\n<body>\n    <div class=\"container\">\n        <header>\n            <h1>üìã Task Manager</h1>\n        </header>\n        \n        <main>\n            <div class=\"controls\">\n                <button id=\"addTaskBtn\">+ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É</button>\n                <button id=\"showStatsBtn\">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</button>\n            </div>\n            \n            <div id=\"tasksList\" class=\"tasks-list\">\n                <!-- –ó–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∑–¥–µ—Å—å -->\n            </div>\n        </main>\n    </div>\n    \n    <script src=\"static/script.js\"></script>\n</body>\n</html>\n```\n\n## JavaScript –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è\n\n**–°–≤—è–∑—å —Å Python:**\n```javascript\nlet pyodide;\nlet taskManager;\n\nasync function initPyodide() {\n    pyodide = await loadPyodide();\n    \n    await pyodide.runPythonAsync(`\n        from main import TaskManager\n        task_manager = TaskManager()\n    `);\n    \n    taskManager = pyodide.globals.get('task_manager');\n    loadTasks();\n}\n\nasync function addTask(title, description, category, priority) {\n    await pyodide.runPythonAsync(`\n        task_manager.add_task(\n            title=\"${title}\",\n            description=\"${description}\",\n            category=\"${category}\",\n            priority=${priority}\n        )\n    `);\n    loadTasks();\n}\n\nasync function loadTasks() {\n    const tasks = await pyodide.runPythonAsync('task_manager.get_tasks()');\n    displayTasks(tasks);\n}\n\ndocument.addEventListener('DOMContentLoaded', initPyodide);\n```\n\n## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n**Unit —Ç–µ—Å—Ç—ã:**\n```python\nimport unittest\nfrom main import TaskManager\n\nclass TestTaskManager(unittest.TestCase):\n    def setUp(self):\n        self.manager = TaskManager()\n        self.manager.tasks = []\n    \n    def test_add_task_success(self):\n        task = self.manager.add_task(\"Test task\", \"Description\", \"–†–∞–±–æ—Ç–∞\", 3)\n        \n        self.assertEqual(task[\"title\"], \"Test task\")\n        self.assertEqual(len(self.manager.tasks), 1)\n    \n    def test_complete_task(self):\n        task = self.manager.add_task(\"Test task\")\n        result = self.manager.complete_task(task[\"id\"])\n        \n        self.assertTrue(result)\n        self.assertTrue(self.manager.tasks[0][\"completed\"])\n\nif __name__ == '__main__':\n    unittest.main()\n```\n\n## –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è\n\n**README.md:**\n```markdown\n# Task Manager - Python Pyodide\n\n–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –Ω–∞ Python + Pyodide.\n\n## –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏\n- ‚úÖ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∑–∞–¥–∞—á–∞–º–∏\n- üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n- üîç –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è\n- üíæ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö\n- üß™ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n## –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n- Python 3.12\n- Pyodide (Python –≤ –±—Ä–∞—É–∑–µ—Ä–µ)\n- HTML5, CSS3, JavaScript\n- unittest\n\n## –ó–∞–ø—É—Å–∫\n1. –û—Ç–∫—Ä–æ–π—Ç–µ `index.html` –≤ –±—Ä–∞—É–∑–µ—Ä–µ\n2. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∑–∏—Ç Python\n```\n\n**–ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**\n- –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Python –∏ –≤–µ–±-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π\n- –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞\n- –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è\n- –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–≤—ã–∫–æ–≤ Junior Python Developer",
    "tasks": [
        {
            "id": "m10t1",
            "question": "–ö–∞–∫–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –Ω—É–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ?",
            "answer": "—Ñ—É–Ω–∫—Ü–∏–∏, –∫–ª–∞—Å—Å—ã, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫",
            "hint": "–í—Å–µ –∏–∑—É—á–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ Python."
        },
        {
            "id": "m10t2",
            "question": "–ù–∞ –∫–∞–∫–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?",
            "answer": "Pyodide –≤ –±—Ä–∞—É–∑–µ—Ä–µ",
            "hint": "–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ Pyodide."
        },
        {
            "id": "m10t3",
            "question": "–ö–∞–∫–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç?",
            "answer": "–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π",
            "hint": "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."
        },
        {
            "id": "m10t4",
            "question": "–ù—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ? (–¥–∞/–Ω–µ—Ç)",
            "answer": "–¥–∞",
            "hint": "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ‚Äî –≤–∞–∂–Ω–∞—è —á–∞—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞."
        }
    ]
}
