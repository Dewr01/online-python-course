{
    "title": "Проверка и тестирование",
    "theory": "**Проверка и тестирование** — критически важный этап разработки финального проекта.\n## Стратегия тестирования\n\n**Типы тестов для финального проекта:**\n- **Unit тесты** — тестирование отдельных функций и классов\n- **Integration тесты** — тестирование взаимодействия компонентов\n- **UI тесты** — тестирование пользовательского интерфейса\n- **Performance тесты** — проверка производительности\n\n## Unit тестирование\n\n**Комплексные тесты для всех компонентов:**\n```python\nimport unittest\nfrom main import TaskManager\n\nclass TestTaskManagerComprehensive(unittest.TestCase):\n    def setUp(self):\n        self.manager = TaskManager()\n        self.manager.tasks = []\n    \n    def test_add_task_validation(self):\n        \"\"\"Тестирование валидации при добавлении задач\"\"\"\n        # Валидные данные\n        task = self.manager.add_task(\"Valid Task\", \"Description\", \"Work\", 3)\n        self.assertIsNotNone(task)\n        self.assertEqual(task[\"title\"], \"Valid Task\")\n        \n        # Невалидные данные\n        with self.assertRaises(ValueError):\n            self.manager.add_task(\"\", \"Description\")  # Пустое название\n        \n        with self.assertRaises(ValueError):\n            self.manager.add_task(\"Task\", priority=6)  # Неверный приоритет\n    \n    def test_task_completion_workflow(self):\n        \"\"\"Тестирование полного цикла работы с задачей\"\"\"\n        # Создание задачи\n        task = self.manager.add_task(\"Test Task\", \"Test Description\")\n        task_id = task[\"id\"]\n        \n        # Проверка начального состояния\n        self.assertFalse(task[\"completed\"])\n        \n        # Выполнение задачи\n        result = self.manager.complete_task(task_id)\n        self.assertTrue(result)\n        \n        # Проверка обновленного состояния\n        updated_task = self.manager.get_tasks()[0]\n        self.assertTrue(updated_task[\"completed\"])\n    \n    def test_search_functionality(self):\n        \"\"\"Тестирование поиска задач\"\"\"\n        # Создание тестовых задач\n        self.manager.add_task(\"Python Programming\", \"Learn Python basics\")\n        self.manager.add_task(\"JavaScript Development\", \"Learn JS frameworks\")\n        \n        # Поиск по названию\n        results = self.manager.search_tasks(\"python\")\n        self.assertEqual(len(results), 1)\n        \n        # Поиск без результатов\n        results = self.manager.search_tasks(\"nonexistent\")\n        self.assertEqual(len(results), 0)\n    \n    def test_statistics_calculation(self):\n        \"\"\"Тестирование расчета статистики\"\"\"\n        # Создание тестовых данных\n        self.manager.add_task(\"Task 1\", category=\"Work\", priority=3)\n        self.manager.add_task(\"Task 2\", category=\"Personal\", priority=1)\n        \n        # Выполнение одной задачи\n        self.manager.complete_task(self.manager.tasks[0][\"id\"])\n        \n        # Получение статистики\n        stats = self.manager.get_statistics()\n        \n        # Проверка результатов\n        self.assertEqual(stats[\"total_tasks\"], 2)\n        self.assertEqual(stats[\"completed_tasks\"], 1)\n        self.assertAlmostEqual(stats[\"completion_rate\"], 50.0, places=1)\n```\n\n## Integration тестирование\n\n**Тестирование взаимодействия компонентов:**\n```python\nclass TestIntegration(unittest.TestCase):\n    def test_full_workflow(self):\n        \"\"\"Тестирование полного рабочего процесса\"\"\"\n        manager = TaskManager()\n        manager.tasks = []\n        \n        # 1. Создание задач\n        task1 = manager.add_task(\"High Priority Task\", \"Urgent work\", \"Work\", 5)\n        task2 = manager.add_task(\"Low Priority Task\", \"Optional work\", \"Personal\", 1)\n        \n        # 2. Проверка сортировки по приоритету\n        tasks = manager.get_tasks()\n        self.assertEqual(tasks[0][\"priority\"], 5)\n        \n        # 3. Фильтрация по категории\n        work_tasks = manager.get_tasks(category=\"Work\")\n        self.assertEqual(len(work_tasks), 1)\n        \n        # 4. Выполнение задачи\n        manager.complete_task(task1[\"id\"])\n        \n        # 5. Проверка статистики\n        stats = manager.get_statistics()\n        self.assertEqual(stats[\"total_tasks\"], 2)\n        self.assertEqual(stats[\"completed_tasks\"], 1)\n```\n\n## Performance тестирование\n\n**Тестирование производительности:**\n```python\nimport time\n\nclass TestPerformance(unittest.TestCase):\n    def test_large_dataset_performance(self):\n        \"\"\"Тестирование производительности с большим объемом данных\"\"\"\n        manager = TaskManager()\n        manager.tasks = []\n        \n        # Создание большого количества задач\n        start_time = time.time()\n        \n        for i in range(1000):\n            manager.add_task(f\"Task {i}\", f\"Description {i}\", \"Work\", 1)\n        \n        creation_time = time.time() - start_time\n        self.assertLess(creation_time, 5.0)  # Должно создаться за 5 секунд\n        \n        # Тестирование поиска\n        start_time = time.time()\n        results = manager.search_tasks(\"Task 500\")\n        search_time = time.time() - start_time\n        \n        self.assertLess(search_time, 1.0)  # Поиск должен быть быстрым\n        self.assertEqual(len(results), 1)\n```\n\n## Автоматизация тестирования\n\n**Настройка автоматического запуска тестов:**\n```python\n# run_tests.py\nimport unittest\nimport sys\nimport os\n\ndef run_all_tests():\n    \"\"\"Запуск всех тестов\"\"\"\n    test_loader = unittest.TestLoader()\n    test_suite = test_loader.discover('tests', pattern='test_*.py')\n    \n    runner = unittest.TextTestRunner(verbosity=2)\n    result = runner.run(test_suite)\n    \n    return 0 if result.wasSuccessful() else 1\n\nif __name__ == '__main__':\n    exit_code = run_all_tests()\n    sys.exit(exit_code)\n```\n\n## Лучшие практики тестирования\n\n**Рекомендации для качественного тестирования:**\n\n1. **Покрытие кода** — стремитесь к 80%+ покрытию\n2. **Тестирование граничных случаев** — минимальные, максимальные, пустые значения\n3. **Тестирование ошибок** — все возможные исключения\n4. **Изоляция тестов** — каждый тест независим\n5. **Читаемость тестов** — понятные имена и структура\n6. **Автоматизация** — интеграция в CI/CD\n7. **Производительность** — тестирование с большими данными\n\n**Ключевые принципы:**\n- Тестируйте поведение, а не реализацию\n- Один тест — одна проверка\n- Используйте моки для внешних зависимостей\n- Регулярно запускайте тесты\n- Анализируйте результаты и улучшайте покрытие",
    "tasks": [
        {
            "id": "m10t5",
            "question": "Какие тесты нужно написать для финального проекта?",
            "answer": "функциональные тесты",
            "hint": "Тесты всех функций приложения."
        },
        {
            "id": "m10t6",
            "question": "Что такое граничные случаи?",
            "answer": "крайние значения входных данных",
            "hint": "Минимальные, максимальные, пустые значения."
        },
        {
            "id": "m10t7",
            "question": "Какой модуль использовать для автоматических тестов?",
            "answer": "unittest",
            "hint": "unittest — стандартный модуль тестирования."
        },
        {
            "id": "m10t8",
            "question": "Нужно ли тестировать пользовательский интерфейс? (да/нет)",
            "answer": "да",
            "hint": "UI тестирование — важная часть проверки."
        }
    ]
}
