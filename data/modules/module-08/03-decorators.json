{
    "title": "Декораторы",
    "theory": "**Декораторы** — мощный инструмент Python для модификации поведения функций и классов без изменения их исходного кода.\n## Что такое декораторы\n\n**Декоратор** — функция, которая принимает другую функцию как аргумент и возвращает модифицированную версию этой функции.\n\n**Основной синтаксис:**\n```python\n@decorator_name\ndef function_name():\n    pass\n```\n\n## Простые декораторы\n\n**Пример декоратора для логирования:**\n```python\ndef log_function(func):\n    def wrapper(*args, **kwargs):\n        print(f\"Вызывается функция {func.__name__}\")\n        result = func(*args, **kwargs)\n        print(f\"Функция {func.__name__} завершена\")\n        return result\n    return wrapper\n\n@log_function\ndef greet(name):\n    return f\"Привет, {name}!\"\n\n# Использование\ngreeting = greet(\"Анна\")\n# Вывод: Вызывается функция greet\n#        Функция greet завершена\n```\n\n## Декораторы с параметрами\n\n```python\ndef repeat(times):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            for _ in range(times):\n                result = func(*args, **kwargs)\n            return result\n        return wrapper\n    return decorator\n\n@repeat(3)\ndef say_hello():\n    print(\"Привет!\")\n\nsay_hello()  # Выведет \"Привет!\" три раза\n```\n\n## Встроенные декораторы\n\n**@property** — создание свойств:\n```python\nclass Circle:\n    def __init__(self, radius):\n        self._radius = radius\n    \n    @property\n    def area(self):\n        return 3.14159 * self._radius ** 2\n    \n    @property\n    def radius(self):\n        return self._radius\n    \n    @radius.setter\n    def radius(self, value):\n        if value < 0:\n            raise ValueError(\"Радиус не может быть отрицательным\")\n        self._radius = value\n\ncircle = Circle(5)\nprint(circle.area)  # 78.54\ncircle.radius = 10  # Использует setter\n```\n\n**@staticmethod** и **@classmethod**:\n```python\nclass MathUtils:\n    @staticmethod\n    def add(x, y):\n        return x + y\n    \n    @classmethod\n    def from_string(cls, string):\n        return cls(int(string))\n```\n\n## Множественные декораторы\n\n```python\n@decorator1\n@decorator2\n@decorator3\ndef my_function():\n    pass\n\n# Эквивалентно:\n# my_function = decorator1(decorator2(decorator3(my_function)))\n```\n\n## Практические примеры\n\n**Декоратор для измерения времени:**\n```python\nimport time\n\ndef timing_decorator(func):\n    def wrapper(*args, **kwargs):\n        start = time.time()\n        result = func(*args, **kwargs)\n        end = time.time()\n        print(f\"{func.__name__} выполнилась за {end - start:.4f} секунд\")\n        return result\n    return wrapper\n```\n\n**Декоратор для кэширования:**\n```python\ndef memoize(func):\n    cache = {}\n    def wrapper(*args):\n        if args in cache:\n            return cache[args]\n        result = func(*args)\n        cache[args] = result\n        return result\n    return wrapper\n\n@memoize\ndef fibonacci(n):\n    if n < 2:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)\n```\n\n**Преимущества декораторов:**\n- Разделение ответственности\n- Переиспользование кода\n- Чистый и читаемый код\n- Легкость тестирования",
    "tasks": [
        {
            "id": "m8t9",
            "question": "Как применить декоратор к функции?",
            "answer": "@decorator",
            "hint": "@имя_декоратора перед определением функции."
        },
        {
            "id": "m8t10",
            "question": "Что принимает декоратор как параметр?",
            "answer": "функцию",
            "hint": "Декоратор принимает функцию и возвращает модифицированную."
        },
        {
            "id": "m8t11",
            "question": "Можно ли применить несколько декораторов к одной функции? (да/нет)",
            "answer": "да",
            "hint": "@decorator1 @decorator2 def func():"
        },
        {
            "id": "m8t12",
            "question": "Для чего обычно используются декораторы?",
            "answer": "добавление функциональности",
            "hint": "Логирование, кэширование, проверка прав и т.д."
        }
    ]
}
