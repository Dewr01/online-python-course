{
    "title": "Мини-проект: ToDo-лист",
    "theory": "**Мини-проект: ToDo-лист** — полнофункциональное приложение для управления задачами.\n## Цель проекта\n\nСоздать приложение, демонстрирующее:\n- CRUD операции (Create, Read, Update, Delete)\n- Файловый ввод/вывод\n- Пользовательский интерфейс\n- Валидацию данных\n- Структурирование кода\n\n## Архитектура проекта\n\n**Модель данных:**\n```python\n# todo.py\nfrom datetime import datetime\nimport json\n\nclass Task:\n    def __init__(self, title, description=\"\", priority=1, due_date=None):\n        self.id = int(datetime.now().timestamp() * 1000)\n        self.title = title\n        self.description = description\n        self.priority = priority  # 1-5, где 5 — наивысший\n        self.completed = False\n        self.created_at = datetime.now().isoformat()\n        self.due_date = due_date\n        \n    def to_dict(self):\n        return {\n            'id': self.id,\n            'title': self.title,\n            'description': self.description,\n            'priority': self.priority,\n            'completed': self.completed,\n            'created_at': self.created_at,\n            'due_date': self.due_date\n        }\n    \n    @classmethod\n    def from_dict(cls, data):\n        task = cls(data['title'], data.get('description', ''))\n        task.id = data['id']\n        task.priority = data.get('priority', 1)\n        task.completed = data.get('completed', False)\n        task.created_at = data.get('created_at', datetime.now().isoformat())\n        task.due_date = data.get('due_date')\n        return task\n\nclass TodoList:\n    def __init__(self):\n        self.tasks = []\n        self.filename = \"todo_data.json\"\n    \n    def add_task(self, title, description=\"\", priority=1, due_date=None):\n        \"\"\"Добавление новой задачи\"\"\"\n        task = Task(title, description, priority, due_date)\n        self.tasks.append(task)\n        self.save_to_file()\n        return task\n    \n    def get_task(self, task_id):\n        \"\"\"Поиск задачи по ID\"\"\"\n        for task in self.tasks:\n            if task.id == task_id:\n                return task\n        return None\n    \n    def update_task(self, task_id, **kwargs):\n        \"\"\"Обновление задачи\"\"\"\n        task = self.get_task(task_id)\n        if task:\n            for key, value in kwargs.items():\n                if hasattr(task, key):\n                    setattr(task, key, value)\n            self.save_to_file()\n            return True\n        return False\n    \n    def delete_task(self, task_id):\n        \"\"\"Удаление задачи\"\"\"\n        task = self.get_task(task_id)\n        if task:\n            self.tasks.remove(task)\n            self.save_to_file()\n            return True\n        return False\n    \n    def get_all_tasks(self):\n        \"\"\"Получение всех задач\"\"\"\n        return self.tasks\n    \n    def get_completed_tasks(self):\n        \"\"\"Получение выполненных задач\"\"\"\n        return [task for task in self.tasks if task.completed]\n    \n    def get_pending_tasks(self):\n        \"\"\"Получение невыполненных задач\"\"\"\n        return [task for task in self.tasks if not task.completed]\n    \n    def save_to_file(self):\n        \"\"\"Сохранение в файл\"\"\"\n        data = [task.to_dict() for task in self.tasks]\n        try:\n            with open(self.filename, 'w', encoding='utf-8') as f:\n                json.dump(data, f, ensure_ascii=False, indent=2)\n        except Exception as e:\n            print(f\"Ошибка сохранения: {e}\")\n    \n    def load_from_file(self):\n        \"\"\"Загрузка из файла\"\"\"\n        try:\n            with open(self.filename, 'r', encoding='utf-8') as f:\n                data = json.load(f)\n                self.tasks = [Task.from_dict(task_data) for task_data in data]\n        except FileNotFoundError:\n            print(\"Файл данных не найден, создан новый список\")\n        except Exception as e:\n            print(f\"Ошибка загрузки: {e}\")\n```\n\n## Пользовательский интерфейс\n\n**Главное меню:**\n```python\n# ui.py\ndef display_menu():\n    print(\"\n=== TODO LIST ===\")\n    print(\"1. Показать все задачи\")\n    print(\"2. Показать активные задачи\")\n    print(\"3. Показать выполненные задачи\")\n    print(\"4. Добавить задачу\")\n    print(\"5. Редактировать задачу\")\n    print(\"6. Отметить как выполненную\")\n    print(\"7. Удалить задачу\")\n    print(\"8. Поиск задач\")\n    print(\"9. Сохранить данные\")\n    print(\"0. Выход\")\n    print(\"-\" * 30)\n\ndef get_choice():\n    \"\"\"Получение выбора пользователя\"\"\"\n    while True:\n        try:\n            choice = int(input(\"Выберите действие (0-9): \"))\n            if 0 <= choice <= 9:\n                return choice\n            else:\n                print(\"Ошибка! Выберите число от 0 до 9.\")\n        except ValueError:\n            print(\"Ошибка! Введите корректное число.\")\n\ndef get_input(prompt, required=True):\n    \"\"\"Безопасный ввод данных\"\"\"\n    while True:\n        value = input(prompt).strip()\n        if required and not value:\n            print(\"Это поле обязательно для заполнения!\")\n        else:\n            return value\n\ndef get_priority():\n    \"\"\"Получение приоритета\"\"\"\n    while True:\n        try:\n            priority = int(input(\"Приоритет (1-5, где 5 — наивысший): \"))\n            if 1 <= priority <= 5:\n                return priority\n            else:\n                print(\"Ошибка! Приоритет должен быть от 1 до 5.\")\n        except ValueError:\n            print(\"Ошибка! Введите число.\")\n```\n\n## Основная логика\n\n**Главный цикл программы:**\n```python\n# main.py\nfrom todo import TodoList\nfrom ui import *\n\ndef main():\n    todo_list = TodoList()\n    todo_list.load_from_file()\n    \n    while True:\n        display_menu()\n        choice = get_choice()\n        \n        if choice == 0:\n            print(\"Сохранение данных...\")\n            todo_list.save_to_file()\n            print(\"До свидания!\")\n            break\n        elif choice == 1:\n            show_all_tasks(todo_list)\n        elif choice == 2:\n            show_pending_tasks(todo_list)\n        elif choice == 3:\n            show_completed_tasks(todo_list)\n        elif choice == 4:\n            add_task(todo_list)\n        elif choice == 5:\n            edit_task(todo_list)\n        elif choice == 6:\n            mark_completed(todo_list)\n        elif choice == 7:\n            delete_task(todo_list)\n        elif choice == 8:\n            search_tasks(todo_list)\n        elif choice == 9:\n            todo_list.save_to_file()\n            print(\"Данные сохранены!\")\n\ndef show_all_tasks(todo_list):\n    \"\"\"Показать все задачи\"\"\"\n    tasks = todo_list.get_all_tasks()\n    display_tasks(tasks, \"Все задачи\")\n\ndef show_pending_tasks(todo_list):\n    \"\"\"Показать активные задачи\"\"\"\n    tasks = todo_list.get_pending_tasks()\n    display_tasks(tasks, \"Активные задачи\")\n\ndef show_completed_tasks(todo_list):\n    \"\"\"Показать выполненные задачи\"\"\"\n    tasks = todo_list.get_completed_tasks()\n    display_tasks(tasks, \"Выполненные задачи\")\n\ndef display_tasks(tasks, title):\n    \"\"\"Отображение списка задач\"\"\"\n    if not tasks:\n        print(f\"\n{title} не найдены.\")\n        return\n    \n    print(f\"\n=== {title.upper()} ===\")\n    for i, task in enumerate(tasks, 1):\n        status = \"✓\" if task.completed else \"◯\"\n        priority = \"★\" * task.priority\n        print(f\"{i}. [{status}] {task.title} {priority}\")\n        if task.description:\n            print(f\"   Описание: {task.description}\")\n        if task.due_date:\n            print(f\"   Срок: {task.due_date}\")\n        print(f\"   ID: {task.id}\")\n        print()\n```\n\n## CRUD операции\n\n**Добавление задачи:**\n```python\ndef add_task(todo_list):\n    \"\"\"Добавление новой задачи\"\"\"\n    print(\"\n=== ДОБАВЛЕНИЕ ЗАДАЧИ ===\")\n    \n    title = get_input(\"Название задачи: \", required=True)\n    description = get_input(\"Описание (необязательно): \", required=False)\n    priority = get_priority()\n    due_date = get_input(\"Срок выполнения (ГГГГ-ММ-ДД): \", required=False)\n    \n    todo_list.add_task(title, description, priority, due_date)\n    print(\"Задача добавлена успешно!\")\n```\n\n**Редактирование задачи:**\n```python\ndef edit_task(todo_list):\n    \"\"\"Редактирование существующей задачи\"\"\"\n    tasks = todo_list.get_all_tasks()\n    if not tasks:\n        print(\"Нет задач для редактирования.\")\n        return\n    \n    display_tasks(tasks, \"Выберите задачу для редактирования\")\n    \n    try:\n        task_id = int(input(\"Введите ID задачи для редактирования: \"))\n        task = todo_list.get_task(task_id)\n        \n        if not task:\n            print(\"Задача не найдена.\")\n            return\n        \n        print(f\"\nРедактирование задачи: {task.title}\")\n        \n        title = get_input(f\"Новое название [{task.title}]: \", required=False)\n        description = get_input(f\"Новое описание [{task.description}]: \", required=False)\n        \n        if title:\n            task.title = title\n        if description is not None:\n            task.description = description\n        \n        print(\"Хотите изменить приоритет? (y/n)\")\n        if input().lower() == 'y':\n            task.priority = get_priority()\n        \n        print(\"Хотите изменить срок? (y/n)\")\n        if input().lower() == 'y':\n            task.due_date = get_input(\"Новый срок (ГГГГ-ММ-ДД): \", required=False)\n        \n        todo_list.save_to_file()\n        print(\"Задача обновлена успешно!\")\n        \n    except ValueError:\n        print(\"Ошибка! Введите корректный ID.\")\n```\n\n**Отметка как выполненной:**\n```python\ndef mark_completed(todo_list):\n    \"\"\"Отметка задачи как выполненной\"\"\"\n    tasks = todo_list.get_pending_tasks()\n    if not tasks:\n        print(\"Нет активных задач.\")\n        return\n    \n    display_tasks(tasks, \"Выберите задачу для отметки\")\n    \n    try:\n        task_id = int(input(\"Введите ID задачи для отметки: \"))\n        \n        if todo_list.update_task(task_id, completed=True):\n            print(\"Задача отмечена как выполненная!\")\n        else:\n            print(\"Задача не найдена.\")\n            \n    except ValueError:\n        print(\"Ошибка! Введите корректный ID.\")\n```\n\n**Удаление задачи:**\n```python\ndef delete_task(todo_list):\n    \"\"\"Удаление задачи\"\"\"\n    tasks = todo_list.get_all_tasks()\n    if not tasks:\n        print(\"Нет задач для удаления.\")\n        return\n    \n    display_tasks(tasks, \"Выберите задачу для удаления\")\n    \n    try:\n        task_id = int(input(\"Введите ID задачи для удаления: \"))\n        \n        if todo_list.delete_task(task_id):\n            print(\"Задача удалена успешно!\")\n        else:\n            print(\"Задача не найдена.\")\n            \n    except ValueError:\n        print(\"Ошибка! Введите корректный ID.\")\n```\n\n**Поиск задач:**\n```python\ndef search_tasks(todo_list):\n    \"\"\"Поиск задач по ключевым словам\"\"\"\n    keyword = get_input(\"Введите ключевое слово для поиска: \", required=True).lower()\n    \n    found_tasks = []\n    for task in todo_list.get_all_tasks():\n        if (keyword in task.title.lower() or \n            keyword in task.description.lower()):\n            found_tasks.append(task)\n    \n    display_tasks(found_tasks, f\"Результаты поиска: '{keyword}'\")\n```\n\n## Дополнительные функции\n\n**Сортировка задач:**\n```python\ndef sort_tasks(tasks, sort_by=\"priority\"):\n    \"\"\"Сортировка задач\"\"\"\n    if sort_by == \"priority\":\n        return sorted(tasks, key=lambda x: x.priority, reverse=True)\n    elif sort_by == \"date\":\n        return sorted(tasks, key=lambda x: x.created_at)\n    elif sort_by == \"title\":\n        return sorted(tasks, key=lambda x: x.title)\n    return tasks\n```\n\n**Экспорт/импорт:**\n```python\ndef export_to_csv(todo_list, filename=\"todo_export.csv\"):\n    \"\"\"Экспорт в CSV\"\"\"\n    try:\n        with open(filename, 'w', encoding='utf-8') as f:\n            f.write(\"ID,Title,Description,Priority,Completed,Created At,Due Date\n\")\n            for task in todo_list.get_all_tasks():\n                f.write(f\"{task.id},{task.title},{task.description},\")\n                f.write(f\"{task.priority},{task.completed},{task.created_at},{task.due_date}\n\")\n        print(f\"Данные экспортированы в {filename}\")\n    except Exception as e:\n        print(f\"Ошибка экспорта: {e}\")\n```\n\n## Запуск программы\n\n**Точка входа:**\n```python\nif __name__ == \"__main__\":\n    try:\n        main()\n    except KeyboardInterrupt:\n        print(\"\n\nПрограмма прервана пользователем\")\n    except Exception as e:\n        print(f\"\nКритическая ошибка: {e}\")\n    finally:\n        print(\"Спасибо за использование ToDo листа!\")\n```\n\n**Ключевые особенности проекта:**\n- Полноценный CRUD функционал\n- Сохранение данных в JSON файл\n- Интуитивный пользовательский интерфейс\n- Валидация всех входных данных\n- Расширяемая архитектура\n- Обработка всех возможных ошибок",
    "tasks": [
        {
            "id": "m9t17",
            "question": "Какие CRUD операции нужны для ToDo-листа?",
            "answer": "создание, чтение, обновление, удаление",
            "hint": "Create, Read, Update, Delete."
        },
        {
            "id": "m9t18",
            "question": "В каком формате сохранять данные?",
            "answer": "json",
            "hint": "JSON — удобный формат для данных."
        },
        {
            "id": "m9t19",
            "question": "Как организовать хранение задач?",
            "answer": "список объектов Task",
            "hint": "Класс Task для каждой задачи."
        },
        {
            "id": "m9t20",
            "question": "Какие поля должны быть у задачи?",
            "answer": "название, описание, статус, приоритет",
            "hint": "title, description, completed, priority."
        }
    ]
}
