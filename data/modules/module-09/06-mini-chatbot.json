{
    "title": "Мини-проект: чат-бот",
    "theory": "**Мини-проект: Чат-бот** — интерактивное приложение для общения с пользователем.\n## Цель проекта\n\nСоздать чат-бота, демонстрирующего:\n- Обработку пользовательского ввода\n- Работу со словарями и структурами данных\n- Циклы и условную логику\n- Обработку ошибок\n- Модульную архитектуру\n\n## Базовая архитектура\n\n**Основной класс чат-бота:**\n```python\nclass ChatBot:\n    def __init__(self, name=\"Ассистент\"):\n        self.name = name\n        self.responses = self._load_responses()\n        self.context = {}\n        self.conversation_history = []\n    \n    def _load_responses(self):\n        \"\"\"Загрузка предопределенных ответов\"\"\"\n        return {\n            \"привет\": [\"Привет! Как дела?\", \"Здравствуйте! Чем могу помочь?\"],\n            \"как дела\": [\"Отлично! А у вас как?\", \"Хорошо, спасибо!\"],\n            \"погода\": [\"Сегодня солнечно!\", \"Не знаю, посмотрите в окно\"],\n            \"время\": [\"Сейчас {time}\", \"Время: {time}\"],\n            \"помощь\": [\"Я могу помочь с базовыми вопросами\", \"Список команд: привет, время, погода, помощь\"],\n            \"пока\": [\"До свидания!\", \"Увидимся позже!\"]\n        }\n    \n    def get_response(self, user_input):\n        \"\"\"Получение ответа на пользовательский ввод\"\"\"\n        user_input = user_input.lower().strip()\n        \n        # Сохранение в историю\n        self.conversation_history.append(f\"Пользователь: {user_input}\")\n        \n        # Поиск подходящего ответа\n        for key, responses in self.responses.items():\n            if key in user_input:\n                response = self._format_response(responses)\n                self.conversation_history.append(f\"{self.name}: {response}\")\n                return response\n        \n        # Ответ по умолчанию\n        default_response = \"Извините, я не понимаю. Попробуйте 'помощь' для списка команд.\"\n        self.conversation_history.append(f\"{self.name}: {default_response}\")\n        return default_response\n    \n    def _format_response(self, responses):\n        \"\"\"Форматирование ответа\"\"\"\n        import random\n        from datetime import datetime\n        \n        response = random.choice(responses)\n        \n        # Замена плейсхолдеров\n        if \"{time}\" in response:\n            current_time = datetime.now().strftime(\"%H:%M\")\n            response = response.replace(\"{time}\", current_time)\n        \n        return response\n```\n\n## Расширенный функционал\n\n**Чат-бот с контекстом:**\n```python\nclass AdvancedChatBot(ChatBot):\n    def __init__(self, name=\"Умный Ассистент\"):\n        super().__init__(name)\n        self.user_name = None\n        self.mood = \"neutral\"\n        self.topics = [\"программирование\", \"погода\", \"еда\", \"путешествия\"]\n    \n    def get_response(self, user_input):\n        user_input = user_input.lower().strip()\n        \n        # Обработка специальных команд\n        if user_input.startswith(\"меня зовут\"):\n            self.user_name = user_input.replace(\"меня зовут\", \"\").strip()\n            return f\"Приятно познакомиться, {self.user_name}!\"\n        \n        if user_input.startswith(\"как настроение\"):\n            return f\"Мое настроение: {self.mood}\"\n        \n        if user_input.startswith(\"измени настроение\"):\n            new_mood = user_input.replace(\"измени настроение\", \"\").strip()\n            self.mood = new_mood\n            return f\"Настроение изменено на: {self.mood}\"\n        \n        # Персонализированные ответы\n        if self.user_name and \"как дела\" in user_input:\n            return f\"У меня все хорошо, {self.user_name}! А у вас как дела?\"\n        \n        # Обработка вопросов\n        if user_input.endswith(\"?\"):\n            return self._handle_question(user_input)\n        \n        return super().get_response(user_input)\n    \n    def _handle_question(self, question):\n        \"\"\"Обработка вопросов\"\"\"\n        if \"что\" in question:\n            return \"Это интересный вопрос! Можете уточнить?\"\n        elif \"как\" in question:\n            return \"Хороший вопрос! Я думаю об этом...\"\n        elif \"почему\" in question:\n            return \"Сложный вопрос! Нужно подумать.\"\n        else:\n            return \"Интересно! Расскажите больше.\"\n```\n\n## Система команд\n\n**Обработка команд:**\n```python\nclass CommandBot(ChatBot):\n    def __init__(self):\n        super().__init__(\"Командный Бот\")\n        self.commands = {\n            \"команды\": self._show_commands,\n            \"история\": self._show_history,\n            \"очистить\": self._clear_history,\n            \"статистика\": self._show_stats,\n            \"случайное число\": self._random_number,\n            \"калькулятор\": self._calculator\n        }\n    \n    def get_response(self, user_input):\n        user_input = user_input.lower().strip()\n        \n        # Проверка команд\n        for cmd, handler in self.commands.items():\n            if cmd in user_input:\n                response = handler()\n                self.conversation_history.append(f\"{self.name}: {response}\")\n                return response\n        \n        return super().get_response(user_input)\n    \n    def _show_commands(self):\n        return \"\nДоступные команды:\n\" + \"\n\".join(f\"- {cmd}\" for cmd in self.commands.keys())\n    \n    def _show_history(self):\n        if not self.conversation_history:\n            return \"История пуста.\"\n        \n        recent = self.conversation_history[-5:]  # Последние 5 сообщений\n        return \"\nПоследние сообщения:\n\" + \"\n\".join(recent)\n    \n    def _clear_history(self):\n        self.conversation_history.clear()\n        return \"История очищена.\"\n    \n    def _show_stats(self):\n        total = len(self.conversation_history)\n        user_msgs = len([msg for msg in self.conversation_history if msg.startswith(\"Пользователь\")])\n        return f\"Статистика: Всего сообщений {total}, от пользователя {user_msgs}\"\n    \n    def _random_number(self):\n        import random\n        num = random.randint(1, 100)\n        return f\"Случайное число: {num}\"\n    \n    def _calculator(self):\n        return \"Введите математическое выражение (например: 2+2)\"\n```\n\n## Пользовательский интерфейс\n\n**Главный цикл:**\n```python\ndef main():\n    print(\"=== ЧАТ-БОТ ===\")\n    print(\"Введите 'выход' для завершения\")\n    print(\"Введите 'помощь' для списка команд\")\n    print(\"-\" * 30)\n    \n    bot = AdvancedChatBot()\n    \n    while True:\n        try:\n            user_input = input(\"\nВы: \")\n            \n            if user_input.lower() in [\"выход\", \"пока\", \"до свидания\"]:\n                print(f\"\n{bot.name}: До свидания! Было приятно пообщаться!\")\n                break\n            \n            if not user_input.strip():\n                print(\"Пожалуйста, введите сообщение.\")\n                continue\n            \n            response = bot.get_response(user_input)\n            print(f\"\n{bot.name}: {response}\")\n            \n        except KeyboardInterrupt:\n            print(\"\n\nПрограмма прервана пользователем.\")\n            break\n        except Exception as e:\n            print(f\"\nОшибка: {e}\")\n\ndef interactive_mode():\n    \"\"\"Интерактивный режим с меню\"\"\"\n    print(\"\n=== РЕЖИМЫ ЧАТ-БОТА ===\")\n    print(\"1. Простой бот\")\n    print(\"2. Умный бот с контекстом\")\n    print(\"3. Командный бот\")\n    \n    choice = input(\"\nВыберите режим (1-3): \")\n    \n    if choice == \"1\":\n        bot = ChatBot()\n    elif choice == \"2\":\n        bot = AdvancedChatBot()\n    elif choice == \"3\":\n        bot = CommandBot()\n    else:\n        print(\"Неверный выбор, используется простой бот\")\n        bot = ChatBot()\n    \n    return bot\n```\n\n## Сохранение и загрузка\n\n**Персистентность данных:**\n```python\nimport json\nfrom datetime import datetime\n\nclass PersistentChatBot(AdvancedChatBot):\n    def __init__(self, data_file=\"chatbot_data.json\"):\n        super().__init__()\n        self.data_file = data_file\n        self.load_data()\n    \n    def save_data(self):\n        \"\"\"Сохранение данных бота\"\"\"\n        data = {\n            \"user_name\": self.user_name,\n            \"mood\": self.mood,\n            \"conversation_history\": self.conversation_history,\n            \"last_updated\": datetime.now().isoformat()\n        }\n        \n        try:\n            with open(self.data_file, 'w', encoding='utf-8') as f:\n                json.dump(data, f, ensure_ascii=False, indent=2)\n        except Exception as e:\n            print(f\"Ошибка сохранения: {e}\")\n    \n    def load_data(self):\n        \"\"\"Загрузка данных бота\"\"\"\n        try:\n            with open(self.data_file, 'r', encoding='utf-8') as f:\n                data = json.load(f)\n            \n            self.user_name = data.get('user_name')\n            self.mood = data.get('mood', 'neutral')\n            self.conversation_history = data.get('conversation_history', [])\n            \n        except FileNotFoundError:\n            # Первый запуск\n            pass\n        except Exception as e:\n            print(f\"Ошибка загрузки: {e}\")\n    \n    def get_response(self, user_input):\n        response = super().get_response(user_input)\n        self.save_data()  # Автосохранение\n        return response\n```\n\n## Тестирование\n\n**Unit тесты:**\n```python\nimport unittest\n\nclass TestChatBot(unittest.TestCase):\n    def setUp(self):\n        self.bot = ChatBot()\n    \n    def test_greeting(self):\n        response = self.bot.get_response(\"привет\")\n        self.assertIn(\"Привет\", response)\n    \n    def test_unknown_input(self):\n        response = self.bot.get_response(\"неизвестная команда\")\n        self.assertIn(\"не понимаю\", response)\n    \n    def test_history(self):\n        self.bot.get_response(\"тест\")\n        self.assertEqual(len(self.bot.conversation_history), 2)  # Пользователь + бот\n\nif __name__ == '__main__':\n    unittest.main()\n```\n\n**Ключевые особенности:**\n- Модульная архитектура\n- Обработка различных типов ввода\n- Система команд и контекста\n- Персистентность данных\n- Расширяемость функциональности\n- Полное тестирование",
    "tasks": [
        {
            "id": "m9t21",
            "question": "Какую структуру данных использовать для хранения вопросов и ответов?",
            "answer": "словарь",
            "hint": "Словарь: вопрос → ответ."
        },
        {
            "id": "m9t22",
            "question": "Как обработать неизвестную команду пользователя?",
            "answer": "сообщение об ошибке",
            "hint": "Вывести сообщение о неизвестной команде."
        },
        {
            "id": "m9t23",
            "question": "Как организовать основной цикл чат-бота?",
            "answer": "while True с input()",
            "hint": "Бесконечный цикл с вводом пользователя."
        },
        {
            "id": "m9t24",
            "question": "Какую команду использовать для выхода из чат-бота?",
            "answer": "quit или exit",
            "hint": "Команда для завершения работы."
        }
    ]
}
