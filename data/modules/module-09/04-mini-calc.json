{
    "title": "Мини-проект: калькулятор",
    "theory": "**Мини-проект: Калькулятор** — практическое применение изученных концепций Python.\n## Цель проекта\n\nСоздать интерактивный калькулятор, который демонстрирует:\n- Работу с функциями\n- Обработку ошибок\n- Пользовательский интерфейс\n- Валидацию входных данных\n- Структурирование кода\n\n## Архитектура проекта\n\n**Основные компоненты:**\n```python\n# calculator.py\nclass Calculator:\n    def __init__(self):\n        self.history = []\n    \n    def add(self, a, b):\n        result = a + b\n        self.history.append(f\"{a} + {b} = {result}\")\n        return result\n    \n    def subtract(self, a, b):\n        result = a - b\n        self.history.append(f\"{a} - {b} = {result}\")\n        return result\n    \n    def multiply(self, a, b):\n        result = a * b\n        self.history.append(f\"{a} * {b} = {result}\")\n        return result\n    \n    def divide(self, a, b):\n        if b == 0:\n            raise ValueError(\"Деление на ноль недопустимо!\")\n        result = a / b\n        self.history.append(f\"{a} / {b} = {result}\")\n        return result\n    \n    def power(self, a, b):\n        result = a ** b\n        self.history.append(f\"{a} ^ {b} = {result}\")\n        return result\n    \n    def get_history(self):\n        return self.history\n```\n\n## Пользовательский интерфейс\n\n**Главное меню:**\n```python\ndef display_menu():\n    print(\"\n=== КАЛЬКУЛЯТОР ===\")\n    print(\"1. Сложение\")\n    print(\"2. Вычитание\")\n    print(\"3. Умножение\")\n    print(\"4. Деление\")\n    print(\"5. Возведение в степень\")\n    print(\"6. История операций\")\n    print(\"7. Очистить историю\")\n    print(\"0. Выход\")\n    print(\"-\" * 20)\n\ndef get_number(prompt):\n    \"\"\"Безопасный ввод числа\"\"\"\n    while True:\n        try:\n            return float(input(prompt))\n        except ValueError:\n            print(\"Ошибка! Введите корректное число.\")\n\ndef get_operation():\n    \"\"\"Выбор операции\"\"\"\n    while True:\n        try:\n            choice = int(input(\"Выберите операцию (0-7): \"))\n            if 0 <= choice <= 7:\n                return choice\n            else:\n                print(\"Ошибка! Выберите число от 0 до 7.\")\n        except ValueError:\n            print(\"Ошибка! Введите корректное число.\")\n```\n\n## Основная логика\n\n**Главный цикл программы:**\n```python\ndef main():\n    calc = Calculator()\n    \n    while True:\n        display_menu()\n        choice = get_operation()\n        \n        if choice == 0:\n            print(\"До свидания!\")\n            break\n        elif choice == 6:\n            show_history(calc)\n        elif choice == 7:\n            clear_history(calc)\n        else:\n            perform_operation(calc, choice)\n\ndef perform_operation(calc, operation):\n    \"\"\"Выполнение математической операции\"\"\"\n    try:\n        a = get_number(\"Введите первое число: \")\n        b = get_number(\"Введите второе число: \")\n        \n        if operation == 1:\n            result = calc.add(a, b)\n        elif operation == 2:\n            result = calc.subtract(a, b)\n        elif operation == 3:\n            result = calc.multiply(a, b)\n        elif operation == 4:\n            result = calc.divide(a, b)\n        elif operation == 5:\n            result = calc.power(a, b)\n        \n        print(f\"\nРезультат: {result}\")\n        \n    except ValueError as e:\n        print(f\"Ошибка: {e}\")\n    except Exception as e:\n        print(f\"Неожиданная ошибка: {e}\")\n\ndef show_history(calc):\n    \"\"\"Показ истории операций\"\"\"\n    history = calc.get_history()\n    if not history:\n        print(\"История пуста.\")\n    else:\n        print(\"\n=== ИСТОРИЯ ОПЕРАЦИЙ ===\")\n        for i, operation in enumerate(history, 1):\n            print(f\"{i}. {operation}\")\n\ndef clear_history(calc):\n    \"\"\"Очистка истории\"\"\"\n    calc.history.clear()\n    print(\"История очищена.\")\n```\n\n## Расширенные функции\n\n**Научный калькулятор:**\n```python\nimport math\n\nclass ScientificCalculator(Calculator):\n    def sqrt(self, a):\n        if a < 0:\n            raise ValueError(\"Квадратный корень из отрицательного числа\")\n        result = math.sqrt(a)\n        self.history.append(f\"√{a} = {result}\")\n        return result\n    \n    def sin(self, a):\n        result = math.sin(math.radians(a))\n        self.history.append(f\"sin({a}°) = {result}\")\n        return result\n    \n    def cos(self, a):\n        result = math.cos(math.radians(a))\n        self.history.append(f\"cos({a}°) = {result}\")\n        return result\n    \n    def log(self, a):\n        if a <= 0:\n            raise ValueError(\"Логарифм от неположительного числа\")\n        result = math.log10(a)\n        self.history.append(f\"log({a}) = {result}\")\n        return result\n```\n\n## Обработка ошибок\n\n**Комплексная обработка ошибок:**\n```python\ndef safe_calculate(calc, operation, a, b=None):\n    \"\"\"Безопасное выполнение операций\"\"\"\n    try:\n        if operation == 'sqrt':\n            return calc.sqrt(a)\n        elif operation == 'sin':\n            return calc.sin(a)\n        elif operation == 'cos':\n            return calc.cos(a)\n        elif operation == 'log':\n            return calc.log(a)\n        elif b is not None:\n            if operation == 'add':\n                return calc.add(a, b)\n            elif operation == 'subtract':\n                return calc.subtract(a, b)\n            elif operation == 'multiply':\n                return calc.multiply(a, b)\n            elif operation == 'divide':\n                return calc.divide(a, b)\n            elif operation == 'power':\n                return calc.power(a, b)\n        else:\n            raise ValueError(\"Недостаточно аргументов\")\n            \n    except ValueError as e:\n        print(f\"Ошибка ввода: {e}\")\n        return None\n    except OverflowError:\n        print(\"Ошибка: Результат слишком большой\")\n        return None\n    except Exception as e:\n        print(f\"Неожиданная ошибка: {e}\")\n        return None\n```\n\n## Сохранение истории\n\n**Сохранение в файл:**\n```python\nimport json\nfrom datetime import datetime\n\ndef save_history(calc, filename=\"calculator_history.json\"):\n    \"\"\"Сохранение истории в файл\"\"\"\n    data = {\n        \"timestamp\": datetime.now().isoformat(),\n        \"history\": calc.get_history()\n    }\n    \n    try:\n        with open(filename, 'w', encoding='utf-8') as f:\n            json.dump(data, f, ensure_ascii=False, indent=2)\n        print(f\"История сохранена в {filename}\")\n    except Exception as e:\n        print(f\"Ошибка сохранения: {e}\")\n\ndef load_history(filename=\"calculator_history.json\"):\n    \"\"\"Загрузка истории из файл\"\"\"\n    try:\n        with open(filename, 'r', encoding='utf-8') as f:\n            data = json.load(f)\n        return data.get('history', [])\n    except FileNotFoundError:\n        print(\"Файл истории не найден\")\n        return []\n    except Exception as e:\n        print(f\"Ошибка загрузки: {e}\")\n        return []\n```\n\n## Запуск программы\n\n**Точка входа:**\n```python\nif __name__ == \"__main__\":\n    try:\n        main()\n    except KeyboardInterrupt:\n        print(\"\n\nПрограмма прервана пользователем\")\n    except Exception as e:\n        print(f\"\nКритическая ошибка: {e}\")\n    finally:\n        print(\"Спасибо за использование калькулятора!\")\n```\n\n## Тестирование\n\n**Unit тесты для калькулятора:**\n```python\nimport unittest\n\nclass TestCalculator(unittest.TestCase):\n    def setUp(self):\n        self.calc = Calculator()\n    \n    def test_addition(self):\n        self.assertEqual(self.calc.add(2, 3), 5)\n    \n    def test_division_by_zero(self):\n        with self.assertRaises(ValueError):\n            self.calc.divide(10, 0)\n    \n    def test_history(self):\n        self.calc.add(1, 2)\n        self.assertEqual(len(self.calc.get_history()), 1)\n\nif __name__ == '__main__':\n    unittest.main()\n```\n\n**Ключевые особенности проекта:**\n- Модульная архитектура\n- Обработка всех возможных ошибок\n- Интуитивный пользовательский интерфейс\n- Сохранение истории операций\n- Расширяемость функциональности\n- Полное тестирование",
    "tasks": [
        {
            "id": "m9t13",
            "question": "Какие основные операции должен выполнять калькулятор?",
            "answer": "сложение, вычитание, умножение, деление",
            "hint": "Четыре арифметические операции."
        },
        {
            "id": "m9t14",
            "question": "Какую ошибку нужно обработать при делении?",
            "answer": "деление на ноль",
            "hint": "ZeroDivisionError при делении на 0."
        },
        {
            "id": "m9t15",
            "question": "Как организовать пользовательский интерфейс калькулятора?",
            "answer": "меню с выбором операции",
            "hint": "Цикл с меню и выбором операции."
        },
        {
            "id": "m9t16",
            "question": "Какие функции нужно создать для калькулятора?",
            "answer": "add, subtract, multiply, divide",
            "hint": "Отдельная функция для каждой операции."
        }
    ]
}
